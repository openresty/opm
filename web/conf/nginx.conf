master_process on;
worker_processes auto;
worker_cpu_affinity auto;

error_log logs/error.log warn;
#error_log logs/error.log debug;

http {
    log_format main '$http_x_forwarded_for - $remote_addr - $remote_user [$time_local] $http_host "$request" $status $body_bytes_sent $request_time "$http_referer" "$http_user_agent"';

    access_log logs/access.log main;

    lua_package_path "$prefix/lua/?.lua;$prefix/lua/vendor/?.lua;;";

    lua_socket_connect_timeout 10s;
    lua_socket_read_timeout 10s;
    lua_socket_send_timeout 10s;

    resolver 8.8.4.4 ipv6=off;
    #lua_code_cache off;

    limit_req_zone $binary_remote_addr zone=fetch_req:50m rate=50r/s;

    limit_req_zone $binary_remote_addr zone=upload_req:50m rate=2r/s;
    limit_conn_zone $binary_remote_addr zone=upload_conn:50m;

    lua_shared_dict global_github_limit 100k;
    lua_shared_dict bad_users 50m;

    init_by_lua_block {
        -- preload Lua modules
        require "opmserver"
    }

    server_tokens off;

    server {
        server_name opm.openresty.org;

        # production deployment should use https here instead.
        listen 8080;

        lua_ssl_trusted_certificate root-ca.crt;
        lua_ssl_verify_depth 5;
        lua_ssl_protocols TLSv1.2;

        client_max_body_size 0;
        default_type text/plain;
        include mime.types;
        charset utf-8;

        location = /robots.txt {
            content_by_lua_block {
                ngx.say('User-agent: *\nDisallow: /api/');
            }
        }

        location = /api/pkg/upload {
            client_max_body_size 256k;
            client_body_in_file_only on;

            default_type text/plain;

            # you should comment these out before doing load testing
            # and benchmark.
            limit_req zone=upload_req burst=5;
            limit_conn upload_conn 4;

            content_by_lua_block {
                require("opmserver").do_upload()
            }
        }

        location = /api/pkg/exists {
            expires 7d;

            include get-limiting.conf;

            content_by_lua_block {
                require("opmserver").do_pkg_exists()
            }
        }

        location = /api/pkg/fetch {
            expires 3m;

            include get-limiting.conf;

            content_by_lua_block {
                require("opmserver").do_pkg_fetch()
            }
        }

        location /api/pkg/tarball {
            expires 7d;

            set $opm_final_dir '';

            include get-limiting.conf;

            access_by_lua_block {
                ngx.var.opm_final_dir = require("opmserver").get_final_directory()
            }

            alias $opm_final_dir;
        }

        location = /api/pkg/search {
            expires 5m;

            include get-limiting.conf;

            content_by_lua_block {
                require("opmserver").do_pkg_search()
            }
        }

        location = /api/pkg/search/name {
            expires 5m;

            include get-limiting.conf;

            content_by_lua_block {
                require("opmserver").do_pkg_name_search()
            }
        }

        # only for internal use in util/opm-pkg-indexer.pl
        location = /api/pkg/incoming {
            allow 127.0.0.1;
            deny all;

            content_by_lua_block {
                require("opmserver").do_incoming()
            }
        }

        # only for internal use in util/opm-pkg-indexer.pl
        location = /api/pkg/processed {
            allow 127.0.0.1;
            deny all;

            content_by_lua_block {
                require("opmserver").do_processed()
            }
        }

        location = /favicon.ico {
            expires 1d;
            alias images/favicon.ico;
        }

        location /css {
            expires 1d;
            alias css;
        }

        location /images {
            expires 1d;
            alias images;
        }

        location / {
            default_type text/html;
            expires 10s;

            content_by_lua_block {
                require("opmserver").do_web()
            }
        }
    }
}

events {
    accept_mutex off;
}
